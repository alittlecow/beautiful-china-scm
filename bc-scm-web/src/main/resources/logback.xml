<?xml version="1.0" encoding="UTF-8" ?>
<!-- scan：为true配置文件发生变化时重新加载，默认为true，
     scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
     debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true" scanPeriod="1800 seconds"
               debug="false">

    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
    <!-- <contextName>:每个logger都关联到logger上下文，默认上下文名称为“default”。
         但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。
         一旦设置，不能修改。
         <property>:用来定义变量值的标签，<property> 有两个属性，name和value；定义变量后，可以使“${}”来使用变量。
         <timestamp>:两个属性 key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，
         遵循java.txt.SimpleDateFormat的格式。
    -->
    <contextName>beautifulchina</contextName>
    <property scope="context" name="CHARSET" value="utf-8" />
    <property scope="context" name="appName" value="beautifulchina-scm"></property>
    <property scope="context" name="LOG_HOME" value="/logs/" />
    <property scope="context" name="APP_LOG_HOME" value="${LOG_HOME}/${appName}/app" />
    <property scope="context" name="INF_LOG_HOME" value="${LOG_HOME}/${appName}/inf" />
    <property scope="context" name="ERR_LOG_HOME" value="${LOG_HOME}/${appName}/err" />
    <property scope="context" name="INF_LOG_TABLE_NAME" value="bc_scm_inf_record" />
    <property scope="context" name="APP_LOG_TABLE_NAME" value="bc_scm_app_record" />

    <!-- 常用的Pattern变量,大家可打开该pattern进行输出观察 -->
    <!--
      <pattern>
          %d{yyyy-MM-dd HH:mm:ss} [%level] - %msg%n
          Logger: %logger
          Class: %class
          File: %file
          Caller: %caller
          Line: %line
          Message: %m
          Method: %M
          Relative: %relative
          Thread: %thread
          Exception: %ex
          xException: %xEx
          nopException: %nopex
          rException: %rEx
          Marker: %marker
          %n

      </pattern>
       -->
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
    <property scope="context" name="APP_PATTERN" value='%d{yyyy-MM-dd HH:mm:ss.SSS}|%level|%M|%C\:%L|%thread|%replace(%.-2000msg){"(\r|\n)","\t"}|"%.-2000ex{full}"%n' />
    <property scope="context" name="INF_PATTERN" value='|%d{yyyy-MM-dd HH:mm:ss}|%d{SSS}|%level|%replace(%msg){"(\r|\n)","\t"}|"%.-2000ex{full}"%n' />
    <property scope="context" name="ERR_PATTERN" value='${APP_PATTERN}' />

    <!-- ERROR日志文件 -->
    <appender name="ERR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 只记录warn及以上级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <file>${ERR_LOG_HOME}/err.${HOSTNAME}.ing</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名，按天生成文件名 -->
            <fileNamePattern>${ERR_LOG_HOME}/err.${HOSTNAME}.%d{yyyy-MM-dd}.log.%i.zip</fileNamePattern>
            <MaxHistory>60</MaxHistory><!--日志文件保留天数 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 按时间回滚的同时，按文件大小来回滚 -->
                <maxFileSize>30MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>${CHARSET}</charset>
            <pattern>${ERR_PATTERN}</pattern>
        </encoder>
        <!-- 只打印错误日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- info日志文件 -->
    <appender name="INF_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${INF_LOG_HOME}/inf.${HOSTNAME}.ing</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${INF_LOG_HOME}/${INF_LOG_TABLE_NAME}.${HOSTNAME}.%d{yyyy-MM-dd_HHmm}.json.%i
            </fileNamePattern>
            <MaxHistory>1440</MaxHistory><!--日志文件保存个数 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 按时间回滚的同时，按文件大小来回滚 -->
                <maxFileSize>30MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>${CHARSET}</charset>
            <pattern>${INF_PATTERN}</pattern>
        </encoder>
        <!-- 不打印错误日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
            <onMismatch>ACCEPT</onMismatch>
        </filter>
    </appender>


    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder" charset="${CHARSET}">
            <pattern>${APP_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name ="ERR_ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >512</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <includeCallerData>true</includeCallerData>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="ERR_FILE"/>
    </appender>

    <!-- 异步输出 -->
    <appender name ="INF_ASYNC" class= "ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold >512</discardingThreshold>
        <queueSize>1024</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref ="INF_FILE"/>
    </appender>



    <!--<if condition='property("HOSTNAME").contains("lin")'>
        <then>
            &lt;!&ndash; 线上环境的配置，根据日志规范约定输出 &ndash;&gt;
            <root level="WARN">
                <appender-ref ref="ERR_ASYNC" />
            </root>
            <logger name="com.beautifulchina" level="INFO">
                <appender-ref ref="INF_ASYNC" />
            </logger>
        </then>
        <else>-->
            <!--自测环境的配置，全部输出到控制台 -->
            <root level="WARN">
                <appender-ref ref="STDOUT" />
            </root>

            <logger name="com.beautifulchina" level="DEBUG" />
            <logger name="org.springframework" level="INFO" />
            <!--myibatis log configure -->
            <!--<logger name="com.apache.ibatis" level="TRACE" /> -->
            <!--<logger name="java.sql.Connection" level="DEBUG" /> -->
            <!--<logger name="java.sql.Statement" level="DEBUG" /> -->
            <!--<logger name="java.sql.PreparedStatement" level="DEBUG" /> -->
       <!-- </else>
    </if>-->

</configuration>

